{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yuvraj\\\\Pictures\\\\Stolenwork\\\\algo-visualizer\\\\src\\\\algorithms\\\\BFS\\\\BfsVisualization.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport asyncTimeOut from \"../../helpers/asyncTimeOut\";\nimport Queue from \"../../helpers/dataStructures/Queue\";\n\n//const delayTime = 1000;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BfsVisualization = props => {\n  _s();\n  const vertexIndices = new Map();\n  const delayTime = props.visualizationSpeed;\n  const [visited, setVisited] = useState(new Array(props.noOfVertices).fill(-1));\n  const BFS = async vertexID => {\n    const queue = new Queue();\n    // const newVisited = visited\n    // newVisited[vertexID] = 1;\n    // await asyncTimeOut(delayTime);\n    queue.enqueue(vertexID);\n\n    //setVisited(newVisited)\n    while (!queue.empty()) {\n      const frontVertexID = queue.front();\n      queue.dequeue();\n      const incidentEdges = props.adjList.get(frontVertexID);\n      const connectedVerticesID = incidentEdges.map(id => props.edgeRefs.get(id).current.getOtherVertexID(frontVertexID));\n      for (var i = 0; i < connectedVerticesID.length; i++) {\n        const vertexIndex = vertexIndices.get(connectedVerticesID[i]);\n        if (visited[vertexIndex] === -1) {\n          const newVisited = visited;\n          newVisited[vertexIndex] = 1;\n          queue.enqueue(connectedVerticesID[i]);\n          await asyncTimeOut(delayTime);\n          props.edgeRefs.get(incidentEdges[i]).current.changeBackgroundColor(\"#01B878\");\n          props.vertexRefs.get(connectedVerticesID[i]).current.changeBackgroundColor(\"#01B878\");\n          setVisited(newVisited);\n        }\n      }\n    }\n  };\n  const visualizeBFS = async () => {\n    const newVisited = visited;\n    newVisited[props.startingVertex] = -1;\n    await asyncTimeOut(delayTime);\n    props.vertexRefs.get(props.vertexIDs[props.startingVertex]).current.changeBackgroundColor(\"#01B878\");\n    setVisited(newVisited);\n    await BFS(props.vertexIDs[props.startingVertex]);\n    props.endVisualizing();\n  };\n  useEffect(() => {\n    for (var i = 0; i < props.noOfVertices; i++) {\n      vertexIndices.set(props.vertexIDs[i], i);\n    }\n    visualizeBFS();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 10\n  }, this);\n};\n_s(BfsVisualization, \"rN6wtwvNAwG/MOb4W6vheOuB5hs=\");\n_c = BfsVisualization;\nexport default BfsVisualization;\nvar _c;\n$RefreshReg$(_c, \"BfsVisualization\");","map":{"version":3,"names":["useState","useEffect","asyncTimeOut","Queue","jsxDEV","_jsxDEV","BfsVisualization","props","_s","vertexIndices","Map","delayTime","visualizationSpeed","visited","setVisited","Array","noOfVertices","fill","BFS","vertexID","queue","enqueue","empty","frontVertexID","front","dequeue","incidentEdges","adjList","get","connectedVerticesID","map","id","edgeRefs","current","getOtherVertexID","i","length","vertexIndex","newVisited","changeBackgroundColor","vertexRefs","visualizeBFS","startingVertex","vertexIDs","endVisualizing","set","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Yuvraj/Pictures/Stolenwork/algo-visualizer/src/algorithms/BFS/BfsVisualization.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport asyncTimeOut from \"../../helpers/asyncTimeOut\";\r\nimport Queue from \"../../helpers/dataStructures/Queue\";\r\n\r\n//const delayTime = 1000;\r\nconst BfsVisualization = (props) => {\r\n  const vertexIndices = new Map();\r\n  const delayTime = props.visualizationSpeed\r\n  const [visited, setVisited] = useState(\r\n    new Array(props.noOfVertices).fill(-1)\r\n  );\r\n  const BFS = async (vertexID) => {\r\n    const queue = new Queue();\r\n    // const newVisited = visited\r\n    // newVisited[vertexID] = 1;\r\n    // await asyncTimeOut(delayTime);\r\n    queue.enqueue(vertexID);\r\n\r\n    //setVisited(newVisited)\r\n    while (!queue.empty()) {\r\n      const frontVertexID = queue.front();\r\n      queue.dequeue();\r\n      const incidentEdges = props.adjList.get(frontVertexID);\r\n      const connectedVerticesID = incidentEdges.map((id) =>\r\n        props.edgeRefs.get(id).current.getOtherVertexID(frontVertexID)\r\n      );\r\n      for (var i = 0; i < connectedVerticesID.length; i++) {\r\n        const vertexIndex = vertexIndices.get(connectedVerticesID[i]);\r\n        if (visited[vertexIndex] === -1) {\r\n          const newVisited = visited;\r\n          newVisited[vertexIndex] = 1;\r\n          queue.enqueue(connectedVerticesID[i]);\r\n          await asyncTimeOut(delayTime);\r\n          props.edgeRefs\r\n            .get(incidentEdges[i])\r\n            .current.changeBackgroundColor(\"#01B878\");\r\n          props.vertexRefs\r\n            .get(connectedVerticesID[i])\r\n            .current.changeBackgroundColor(\"#01B878\");\r\n          setVisited(newVisited);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const visualizeBFS = async () => {\r\n    const newVisited = visited;\r\n    newVisited[props.startingVertex] = -1;\r\n\r\n    await asyncTimeOut(delayTime);\r\n    props.vertexRefs\r\n      .get(props.vertexIDs[props.startingVertex])\r\n      .current.changeBackgroundColor(\"#01B878\");\r\n\r\n    setVisited(newVisited);\r\n\r\n    await BFS(props.vertexIDs[props.startingVertex]);\r\n    props.endVisualizing();\r\n  };\r\n\r\n  useEffect(() => {\r\n    for (var i = 0; i < props.noOfVertices; i++) {\r\n      vertexIndices.set(props.vertexIDs[i], i);\r\n    }\r\n    visualizeBFS();\r\n  }, []);\r\n  return <div></div>;\r\n};\r\n\r\nexport default BfsVisualization;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}