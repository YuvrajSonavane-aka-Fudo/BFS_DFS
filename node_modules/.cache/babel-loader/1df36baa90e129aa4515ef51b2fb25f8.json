{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yuvraj\\\\Pictures\\\\GitUpload\\\\algo-visualizer\\\\src\\\\components\\\\Layout\\\\Layout.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport Header from \"../UI/Header/Header\";\nimport AlgorithmOptions from \"../UI/Menu/AlgorithmOptions\";\nimport Canvas from \"../GraphComponents/Canvas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Layout = () => {\n  _s();\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState(AlgorithmOptions[0]);\n  const [isVisualizing, setIsVisualizing] = useState(false);\n  const [speed, setSpeed] = useState(1000); // store this dfault speed in some config file\n  const [adjListOpen, setAdjListOpen] = useState(false);\n  const [startNode, setStartNode] = useState(\"Start Node\");\n  const [topoModalOpen, setTopoModalOpen] = useState(false);\n  const speedChange = (e, value) => {\n    setSpeed(3000 / value);\n  };\n  const selectStartNode = node => {\n    setStartNode(node);\n  };\n  const startVisualizing = () => {\n    setIsVisualizing(true);\n  };\n  const toggleAdjList = () => {\n    setAdjListOpen(prev => !prev);\n  };\n  const endVisualizing = () => {\n    setIsVisualizing(false);\n  };\n  const selectAlgorithm = algorithm => {\n    setSelectedAlgorithm(algorithm);\n  };\n  const toggleTopoModal = action => {\n    setTopoModalOpen(action);\n  };\n  const canvasRef = useRef(null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      startNode: startNode,\n      selectStartNode: selectStartNode,\n      selectAlgorithm: selectAlgorithm,\n      AlgorithmOptions: AlgorithmOptions,\n      selectedAlgorithm: selectedAlgorithm,\n      canvasRef: canvasRef,\n      startVisualizing: startVisualizing,\n      isVisualizing: isVisualizing,\n      toggleAdjList: toggleAdjList,\n      isAdjListOpen: adjListOpen,\n      speedChange: speedChange,\n      initialSpeed: speed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      startNode: startNode,\n      visualizationStart: startVisualizing,\n      visualizationEnd: endVisualizing,\n      isVisualizing: isVisualizing,\n      selectedAlgorithm: selectedAlgorithm,\n      ref: canvasRef,\n      open: adjListOpen,\n      visualizationSpeed: speed,\n      topoModalOpen: topoModalOpen,\n      setTopoModalOpen: toggleTopoModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(Layout, \"SQsBRtuxyQjsBvs9zpTk5rq/e/g=\");\n_c = Layout;\nexport default Layout;\nvar _c;\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"names":["React","useState","useRef","Header","AlgorithmOptions","Canvas","jsxDEV","_jsxDEV","Layout","_s","selectedAlgorithm","setSelectedAlgorithm","isVisualizing","setIsVisualizing","speed","setSpeed","adjListOpen","setAdjListOpen","startNode","setStartNode","topoModalOpen","setTopoModalOpen","speedChange","e","value","selectStartNode","node","startVisualizing","toggleAdjList","prev","endVisualizing","selectAlgorithm","algorithm","toggleTopoModal","action","canvasRef","children","isAdjListOpen","initialSpeed","fileName","_jsxFileName","lineNumber","columnNumber","visualizationStart","visualizationEnd","ref","open","visualizationSpeed","_c","$RefreshReg$"],"sources":["C:/Users/Yuvraj/Pictures/GitUpload/algo-visualizer/src/components/Layout/Layout.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport Header from \"../UI/Header/Header\";\r\nimport AlgorithmOptions from \"../UI/Menu/AlgorithmOptions\";\r\nimport Canvas from \"../GraphComponents/Canvas\";\r\n\r\nconst Layout = () => {\r\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState(\r\n    AlgorithmOptions[0]\r\n  );\r\n\r\n  const [isVisualizing, setIsVisualizing] = useState(false);\r\n  const [speed, setSpeed] = useState(1000); // store this dfault speed in some config file\r\n  const [adjListOpen, setAdjListOpen] = useState(false);\r\n  const [startNode, setStartNode] = useState(\"Start Node\");\r\n  const [topoModalOpen, setTopoModalOpen] = useState(false);\r\n\r\n  const speedChange = (e, value) => {\r\n    setSpeed(3000 / value);\r\n  };\r\n\r\n  const selectStartNode = (node) => {\r\n    setStartNode(node);\r\n  };\r\n\r\n  const startVisualizing = () => {\r\n    setIsVisualizing(true);\r\n  };\r\n\r\n  const toggleAdjList = () => {\r\n    setAdjListOpen((prev) => !prev);\r\n  };\r\n\r\n  const endVisualizing = () => {\r\n    setIsVisualizing(false);\r\n  };\r\n\r\n  const selectAlgorithm = (algorithm) => {\r\n    setSelectedAlgorithm(algorithm);\r\n  };\r\n\r\n  const toggleTopoModal = (action) => {\r\n    setTopoModalOpen(action);\r\n  };\r\n\r\n  const canvasRef = useRef(null);\r\n  return (\r\n    <div>\r\n      <Header\r\n        startNode={startNode}\r\n        selectStartNode={selectStartNode}\r\n        selectAlgorithm={selectAlgorithm}\r\n        AlgorithmOptions={AlgorithmOptions}\r\n        selectedAlgorithm={selectedAlgorithm}\r\n        canvasRef={canvasRef}\r\n        startVisualizing={startVisualizing}\r\n        isVisualizing={isVisualizing}\r\n        toggleAdjList={toggleAdjList}\r\n        isAdjListOpen={adjListOpen}\r\n        speedChange={speedChange}\r\n        initialSpeed={speed}\r\n      ></Header>\r\n      <Canvas\r\n        startNode={startNode}\r\n        visualizationStart={startVisualizing}\r\n        visualizationEnd={endVisualizing}\r\n        isVisualizing={isVisualizing}\r\n        selectedAlgorithm={selectedAlgorithm}\r\n        ref={canvasRef}\r\n        open={adjListOpen}\r\n        visualizationSpeed={speed}\r\n        topoModalOpen={topoModalOpen}\r\n        setTopoModalOpen={toggleTopoModal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}